@page "/categoryProducts"
@using BackEndPizza.Data.CategoryProductsService;
@inject ICategoryProductsService data;
@inject IDialogService DialogService;
@inject ISnackbar Snackbar
<PageTitle>Category products</PageTitle>
<div>

    <MudTable Items="@Elements" Dense="true" Hover="true" CanCancelEdit="true" 
          @bind-SelectedItem="selectedItem" CommitEditTooltip="Commit Edit" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" ApplyButtonPosition="@applyButtonPosition" EditButtonPosition="@editButtonPosition" EditTrigger="TableEditTrigger.EditButton"
    @ref="table"
              ServerData="@(new Func<TableState, Task<TableData<BackEndPizza.Models.Tables.CategoryProducts>>>(ServerReload))">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Producs</MudText>
            <MudSpacer />
            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        
    <ColGroup>
        @if (applyButtonPosition.DisplayApplyButtonAtStart() || (editButtonPosition.DisplayEditButtonAtStart() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
        <col style="width:50%" />
            <col style="width:50%" />
        @if (applyButtonPosition.DisplayApplyButtonAtEnd() || (editButtonPosition.DisplayEditButtonAtEnd() && editTrigger == TableEditTrigger.EditButton))
        {
            <col style="width:50px;" />
        }
    </ColGroup>
        <HeaderContent>
            <MudTh>Category Name</MudTh>
        </HeaderContent>
    <RowTemplate>
            <MudTd DataLabel="Category Name">@context.CategoryName</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
            <MudTd DataLabel="Category Name">
                <MudTextField @bind-Value="@context.CategoryName" Required />
             </MudTd>
    </RowEditingTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
    <EditButtonContent Context="button">
        <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" Class="pa-0" OnClick="@button.ButtonAction" Disabled="@button.ButtonDisabled" />
    </EditButtonContent>
</MudTable>

</div>
 @code {
    private bool _hidePosition;
    private bool _loading;
    private string infoFormat = "{first_item}-{last_item} of {all_items}";
    private string searchString = null;
    private MudTable<BackEndPizza.Models.Tables.CategoryProducts> table;
    private IEnumerable<BackEndPizza.Models.Tables.CategoryProducts> Elements = new List<BackEndPizza.Models.Tables.CategoryProducts>();
    private int totalItems;
    private HashSet<BackEndPizza.Models.Tables.CategoryProducts> selectedItems = new HashSet<BackEndPizza.Models.Tables.CategoryProducts>();

    private List<string> editEvents = new();
    private BackEndPizza.Models.Tables.CategoryProducts elementBeforeEdit;
    private BackEndPizza.Models.Tables.CategoryProducts selectedItem = null;
    private TableApplyButtonPosition applyButtonPosition = TableApplyButtonPosition.End;
    private TableEditButtonPosition editButtonPosition = TableEditButtonPosition.End;
    private TableEditTrigger editTrigger = TableEditTrigger.RowClick;

    private async Task<TableData<BackEndPizza.Models.Tables.CategoryProducts>> ServerReload(TableState state)
    {
        var categoryProducts = data.GetItems().Where(z => !string.IsNullOrWhiteSpace(searchString) && z.CategoryName.Contains(searchString, StringComparison.OrdinalIgnoreCase));
        totalItems = categoryProducts.Count();
        Elements = categoryProducts.Skip(state.Page * state.PageSize).Take(state.PageSize).AsEnumerable();
        return new TableData<BackEndPizza.Models.Tables.CategoryProducts>() { TotalItems = totalItems, Items = Elements };
    }
    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }


    private async void OnButtonClicked(Models.Tables.CategoryProducts producs)
    {
        bool result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting can not be undone!",
            yesText: "Delete!", cancelText: "Cancel") ?? false;
        if(result)
        {
            var success = data.Delete(producs);
            ChangeSnack((result ? "Success " : "Error ") + producs.CategoryName, Variant.Filled, result ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
            await table.ReloadServerData();
        }

        StateHasChanged();
    }

    private void ChangeSnack(string message, Variant variant, MudBlazor.Severity severity)
    {
        Snackbar.Add(message, severity, configure =>
        {
            configure.SnackbarVariant = variant;
            configure.VisibleStateDuration = 3000;
        });
    }
    private void BackupItem(object element)
    {
        elementBeforeEdit = new()
            {
                Id = ((Models.Tables.CategoryProducts)element).Id,
                CategoryName = ((Models.Tables.CategoryProducts)element).CategoryName,
            };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((Models.Tables.CategoryProducts)element).Id = elementBeforeEdit.Id;
        ((Models.Tables.CategoryProducts)element).CategoryName = elementBeforeEdit.CategoryName;
    }
    // to logger
    private void ItemHasBeenCommitted(object element)
    {
        var result = validator.Validate((Models.Tables.Producs)element);
        if (!result.IsValid)
        {
            ChangeSnack("Not validate product", Variant.Filled, MudBlazor.Severity.Error);
            return;
        }

        var resulted = data.Update((Models.Tables.Producs)element);
        ChangeSnack((resulted ? "Success " : "Error ") + ((Models.Tables.Producs)element).Name, Variant.Filled, resulted ? MudBlazor.Severity.Success : MudBlazor.Severity.Error);
    }
}